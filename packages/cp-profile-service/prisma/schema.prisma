// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  userId                 String           @id @default(uuid())
  email                  String?
  emailVerified          Boolean          @default(false) @db.Boolean
  phone                  String?
  phoneData              Json?            @default("{}") @db.Json
  phoneVerified          Boolean          @default(false) @db.Boolean
  registeredVia          String?
  username               String           @unique @default(uuid())
  gender                 String?
  roles                  String[]         @default(["USER"])
  firstname              String?          @db.VarChar(100)
  lastname               String?          @db.VarChar(100)
  displayname            String?          @db.VarChar(100)
  dob                    DateTime
  tos                    Boolean          @db.Boolean
  imageUrl               String?          @db.Text
  wallpaperUrl           String?          @db.Text
  isPrivate              Boolean          @default(false)
  instagramHandle        String?          @db.VarChar(100)
  twitterHandle          String?          @db.VarChar(100)
  snapchatUrl            String?          @db.VarChar(100)
  facebookUrl            String?          @db.VarChar(100)
  websiteUrl             String?          @db.VarChar(100)
  bio                    String?          @db.VarChar(255)
  listingsCount          Int?             @default(0)
  offersCount            Int?             @default(0)
  postCount              Int?             @default(0)
  serviceCount           Int?             @default(0)
  profileSettings        ProfileSettings?
  followers              Follows[]        @relation("following")
  following              Follows[]        @relation("follower")
  receivedFollowRequests FollowRequest[]  @relation("UserToBeFollowed")
  sentFollowRequests     FollowRequest[]  @relation("UserWantsToFollow")
  blocked                Blocked[]        @relation("UserBlockedUser")
  blockedBy              Blocked[]        @relation("UserBlockedByUser")
  version                Int              @default(0)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  deletedAt              DateTime?
}

model ProfileSettings {
  userId      String
  profile     Profile? @relation(fields: [userId], references: [userId], onDelete: Cascade)
  allowFollow Boolean  @default(true)

  @@id([userId])
}

model Follows {
  follower    Profile  @relation("follower", fields: [followerId], references: [userId], onDelete: Cascade)
  followerId  String
  following   Profile  @relation("following", fields: [followingId], references: [userId], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model FollowRequest {
  requestedById String
  requestedBy   Profile  @relation("UserWantsToFollow", fields: [requestedById], references: [userId], onDelete: Cascade)
  receiverId    String
  receiver      Profile  @relation("UserToBeFollowed", fields: [receiverId], references: [userId], onDelete: Cascade)
  createdAt     DateTime @default(now())

  @@id([requestedById, receiverId])
}

model Blocked {
  blockedId   String
  blocked     Profile  @relation("UserBlockedByUser", fields: [blockedId], references: [userId], onDelete: Cascade)
  blockedById String
  blockedBy   Profile  @relation("UserBlockedUser", fields: [blockedById], references: [userId], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@id([blockedById, blockedId])
}

model RequestLog {
  id            String    @unique @default(uuid())
  ip            String?
  userAgent     String?
  userAgentData Json?     @default("{}") @db.Json
  method        String
  path          String
  originalUrl   String
  params        Json      @default("{}") @db.Json
  body          Json      @default("{}") @db.Json
  query         Json      @default("{}") @db.Json
  response      Json      @default("{}") @db.Json
  user          Json?     @default("{}") @db.Json
  userId        String?
  success       Boolean   @default(false)
  responseData  Json?     @default("{}") @db.Json
  time          Int?      @default(0)
  status        Int?
  message       String?
  error         ErrorLog?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ErrorLog {
  id        String      @unique @default(uuid())
  request   RequestLog? @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String?     @unique
  error     String?     @db.VarChar(1000)
  errors    Json?       @default("{}") @db.Json
  status    Int
  fix       String?     @db.VarChar(1000)
  resolved  Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
