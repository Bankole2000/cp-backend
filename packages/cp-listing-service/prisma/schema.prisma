// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId          String    @id @default(uuid())
  email           String?
  emailVerified   Boolean   @default(false) @db.Boolean
  phone           String?
  phoneData       Json?     @default("{}") @db.Json
  phoneVerified   Boolean   @default(false) @db.Boolean
  registeredVia   String?
  username        String    @unique @default(uuid())
  gender          String?
  roles           String[]  @default(["USER"])
  firstname       String?   @db.VarChar(100)
  lastname        String?   @db.VarChar(100)
  displayname     String?   @db.VarChar(100)
  dob             DateTime
  tos             Boolean   @db.Boolean
  createdListings Listing[]
  version         Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
}

model Listing {
  listingId                   String                @id @unique
  title                       String                @db.VarChar(255)
  caption                     String                @db.VarChar(255)
  longDescription             String?               @db.Text
  basicPrice                  Decimal?              @default(0.00) @db.Decimal(10, 2)
  pricePerWeekend             Decimal?              @default(0.00) @db.Decimal(10, 2)
  pricePerWeek                Decimal?              @default(0.00) @db.Decimal(10, 2)
  pricePerMonth               Decimal?              @default(0.00) @db.Decimal(10, 2)
  guestCapacity               Int?
  guestArrivalDaysNotice      Int?
  guestBookingMonthsInAdvance Int?
  bookingStayDaysMin          Int?
  bookingStayDaysMax          Int?
  latitude                    Decimal?
  longitude                   Decimal?
  listingType                 String?
  listingPurpose              String?
  listingPurposeSubgroup      String?
  noOfBedrooms                Int?
  noOfBathrooms               Int?
  isPublished                 Boolean               @default(false) @db.Boolean
  createdBy                   String
  createdByData               User                  @relation(fields: [createdBy], references: [userId])
  images                      ListingImage[]
  houseRules                  ListingHasHouseRule[]
  amenities                   ListingHasAmenities[]
  listingTypeData             ListingType?          @relation("ListingType", fields: [listingType], references: [listingType])
  listingPurposeData          ListingPurpose?       @relation("ListingPurpose", fields: [listingPurpose], references: [listingPurpose])
  listingPurposeSubgroupData  PurposeSubgroup?      @relation(fields: [listingPurposeSubgroup], references: [purposeSubgroup])
  version                     Int                   @default(0)
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  deletedAt                   DateTime?
}

model ListingImage {
  id          String   @id @unique
  listingData Listing  @relation(fields: [listing], references: [listingId])
  listing     String
  title       String
  imageUrl    String
  image       String
  order       Int?
  created     DateTime @default(now())
  updated     DateTime @updatedAt
}

model ListingHasHouseRule {
  listing       Listing   @relation(fields: [listingId], references: [listingId])
  listingId     String
  houseRuleData HouseRule @relation(fields: [houseRule], references: [houseRule])
  houseRule     String
  description   String?
  isAllowed     Boolean   @default(true) @db.Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@id([listingId, houseRule])
}

model HouseRule {
  houseRule       String                @id @unique
  title           String
  descriptionHTML String?
  descriptionText String?
  faIconTrue      String
  faIconFalse     String
  mdiIconTrue     String
  mdiIconFalse    String
  listings        ListingHasHouseRule[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

model ListingType {
  listingType     String    @id @unique
  title           String
  descriptionHTML String
  descriptionText String
  isActive        Boolean   @default(true)
  mdiIcon         String
  faIcon          String
  listings        Listing[] @relation("ListingType")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ListingPurpose {
  listingPurpose   String            @id @unique
  title            String
  descriptionHTML  String
  descriptionText  String
  isActive         Boolean           @default(true)
  faIcon           String
  mdiIcon          String
  listings         Listing[]         @relation("ListingPurpose")
  purposeSubgroups PurposeSubgroup[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model PurposeSubgroup {
  purposeSubgroup    String         @id @unique
  listingPurposeData ListingPurpose @relation(fields: [listingPurpose], references: [listingPurpose])
  listingPurpose     String
  title              String
  descriptionHTML    String
  descriptionText    String
  listings           Listing[]
  isActive           Boolean        @default(true)
  faIcon             String
  mdiIcon            String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model ListingHasAmenities {
  listing     Listing  @relation(fields: [listingId], references: [listingId])
  listingId   String
  amenityData Amenity  @relation(fields: [amenity], references: [amenity])
  amenity     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([listingId, amenity])
}

model Amenity {
  amenity             String                @id @unique
  title               String                @db.VarChar(255)
  descriptionHTML     String?
  descriptionText     String?
  amenityCategory     String
  faIcon              String
  mdiIcon             String
  listings            ListingHasAmenities[]
  amenityCategoryData AmenityCategory       @relation(fields: [amenityCategory], references: [amenityCategory])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model AmenityCategory {
  amenityCategory String    @id @unique
  title           String    @db.VarChar(255)
  descriptionHTML String?   @db.VarChar(255)
  descriptionText String?   @db.VarChar(255)
  amenities       Amenity[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model RequestLog {
  id            String    @unique @default(uuid())
  ip            String?
  userAgent     String?
  userAgentData Json?     @default("{}") @db.Json
  method        String
  path          String
  originalUrl   String
  params        Json      @default("{}") @db.Json
  body          Json      @default("{}") @db.Json
  query         Json      @default("{}") @db.Json
  response      Json      @default("{}") @db.Json
  user          Json?     @default("{}") @db.Json
  userId        String?
  success       Boolean   @default(false)
  responseData  Json?     @default("{}") @db.Json
  time          Int?      @default(0)
  status        Int?
  message       String?
  error         ErrorLog?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ErrorLog {
  id        String      @unique @default(uuid())
  requestId String?     @unique
  error     String?     @db.VarChar(1000)
  errors    Json?       @default("{}") @db.Json
  status    Int
  fix       String?     @db.VarChar(1000)
  resolved  Boolean     @default(false)
  request   RequestLog? @relation(fields: [requestId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
