// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId              String               @id @default(uuid())
  email               String?
  emailVerified       Boolean              @default(false) @db.Boolean
  phone               String?
  phoneData           Json?                @default("{}") @db.Json
  phoneVerified       Boolean              @default(false) @db.Boolean
  registeredVia       String?
  username            String               @unique @default(uuid())
  gender              String?
  roles               String[]             @default(["USER"])
  firstname           String?              @db.VarChar(100)
  lastname            String?              @db.VarChar(100)
  displayname         String?              @db.VarChar(100)
  dob                 DateTime
  tos                 Boolean              @default(false) @db.Boolean
  version             Int                  @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedAt           DateTime?
  chatMessages        ChatMessage[]
  chatRooms           ChatParticipants[]
  readMessages        MessageSeenBy[]
  deliveredMessages   MessageDeliveredTo[]
  messageReactions    Reaction[]           @relation("UserReactedToMessage")
  SentChatInvites     ChatInvites[]        @relation("InvitesSentBy")
  RecievedChatInvites ChatInvites[]        @relation("InvitesSentTo")
  createdGroups       GroupChatSettings[]
}

model ChatInvites {
  inviteId   String    @id @default(uuid())
  chatRoomId String?
  chatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [chatRoomId])
  sentById   String
  sentBy     User      @relation("InvitesSentBy", fields: [sentById], references: [userId])
  sentToId   String
  sentTo     User      @relation("InvitesSentTo", fields: [sentToId], references: [userId])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model ChatRoom {
  chatRoomId        String             @id @default(uuid())
  messages          ChatMessage[]
  type              String             @default("PRIVATE")
  public            Boolean            @default(false)
  participants      ChatParticipants[]
  groupChatSettings GroupChatSettings?
  ChatInvites       ChatInvites[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model GroupChatSettings {
  chatRoomId  String
  chatRoom    ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId])
  name        String?
  description String?
  image       String?
  imageUrl    String?
  createdById String?
  createdBy   User?    @relation(fields: [createdById], references: [userId], onDelete: SetNull)
  groupAdmins String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([chatRoomId])
}

model ChatParticipants {
  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId])
  userId     String
  user       User     @relation(fields: [userId], references: [userId])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([chatRoomId, userId])
}

model ChatMessage {
  messageId        String        @id @default(uuid())
  chatRoomId       String
  chatRoom         ChatRoom      @relation(fields: [chatRoomId], references: [chatRoomId])
  userId           String
  user             User          @relation(fields: [userId], references: [userId])
  message          String
  replyToMessage   ChatMessage?  @relation("MessageHasReply", fields: [replyToMessageId], references: [messageId])
  replyToMessageId String?
  replies          ChatMessage[] @relation("MessageHasReply")
  media            Media?        @relation("MessageHasMedia")
  reactions        Reaction[]    @relation("MessageHasReaction")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?
}

model Media {
  mediaId   String      @id @default(uuid())
  type      String
  url       String?
  data      Json
  message   ChatMessage @relation("MessageHasMedia", fields: [messageId], references: [messageId])
  messageId String      @unique
  createdAt DateTime    @default(now())
}

model Reaction {
  messageId String
  userId    String
  reaction  String
  message   ChatMessage @relation("MessageHasReaction", fields: [messageId], references: [messageId], onDelete: Cascade)
  user      User        @relation("UserReactedToMessage", fields: [userId], references: [userId], onDelete: Cascade)
  createdAt DateTime    @default(now())

  @@id([userId, messageId])
}

model MessageSeenBy {
  messageId String
  userId    String
  user      User   @relation(fields: [userId], references: [userId])

  @@id([messageId, userId])
}

model MessageDeliveredTo {
  messageId String
  userId    String
  user      User   @relation(fields: [userId], references: [userId])

  @@id([messageId, userId])
}

model RequestLog {
  id            String    @unique @default(uuid())
  ip            String?
  userAgent     String?
  userAgentData Json?     @default("{}") @db.Json
  method        String
  path          String
  originalUrl   String
  params        Json      @default("{}") @db.Json
  body          Json      @default("{}") @db.Json
  query         Json      @default("{}") @db.Json
  response      Json      @default("{}") @db.Json
  user          Json?     @default("{}") @db.Json
  userId        String?
  success       Boolean   @default(false)
  responseData  Json?     @default("{}") @db.Json
  time          Int?      @default(0)
  status        Int?
  message       String?
  error         ErrorLog?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ErrorLog {
  id        String      @unique @default(uuid())
  request   RequestLog? @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String?     @unique
  error     String?     @db.VarChar(1000)
  errors    Json?       @default("{}") @db.Json
  status    Int
  fix       String?     @db.VarChar(1000)
  resolved  Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
