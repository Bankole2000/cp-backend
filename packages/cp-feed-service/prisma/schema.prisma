// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        String     @id @default(uuid())
  email         String?
  emailVerified Boolean    @default(false) @db.Boolean
  phone         String?
  phoneData     Json?      @default("{}") @db.Json
  phoneVerified Boolean    @default(false) @db.Boolean
  registeredVia String?
  username      String     @unique @default(uuid())
  gender        String?
  roles         String[]   @default(["USER"])
  firstname     String?    @db.VarChar(100)
  lastname      String?    @db.VarChar(100)
  displayname   String?    @db.VarChar(100)
  dob           DateTime
  tos           Boolean    @db.Boolean
  version       Int        @default(0)
  followers     String[]   @default([])
  following     String[]   @default([])
  blocked       String[]   @default([])
  blockedBy     String[]   @default([])
  UserFeed      UserFeed[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?
  savedPosts    String[]   @default([])
}

model Post {
  id             String     @id @default(uuid())
  caption        String?
  published      Boolean    @default(false)
  allowComments  Boolean    @default(true)
  showLikesCount Boolean    @default(true)
  createdBy      String?
  urls           String[]   @default([])
  repostId       String?
  repost         Post?      @relation("PostIsRepost", fields: [repostId], references: [id])
  postMedia      Json?
  tags           Json?
  moderation     Json?
  createdByData  Json?
  comments       Json?
  views          Json?
  likedBy        Json?
  version        Int        @default(0)
  created        DateTime   @default(now())
  updated        DateTime   @updatedAt
  deletedAt      DateTime?
  UserFeed       UserFeed[]
  reposts        Post[]     @relation("PostIsRepost")
}

model UserFeed {
  userId    String
  user      User     @relation(fields: [userId], references: [userId])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@id([userId, postId, createdAt])
}

model RequestLog {
  id            String    @unique @default(uuid())
  ip            String?
  userAgent     String?
  userAgentData Json?     @default("{}") @db.Json
  method        String
  path          String
  originalUrl   String
  params        Json      @default("{}") @db.Json
  body          Json      @default("{}") @db.Json
  query         Json      @default("{}") @db.Json
  response      Json      @default("{}") @db.Json
  user          Json?     @default("{}") @db.Json
  userId        String?
  success       Boolean   @default(false)
  responseData  Json?     @default("{}") @db.Json
  time          Int?      @default(0)
  status        Int?
  message       String?
  error         ErrorLog?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ErrorLog {
  id        String      @unique @default(uuid())
  request   RequestLog? @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String?     @unique
  error     String?     @db.VarChar(1000)
  errors    Json?       @default("{}") @db.Json
  status    Int
  fix       String?     @db.VarChar(1000)
  resolved  Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
