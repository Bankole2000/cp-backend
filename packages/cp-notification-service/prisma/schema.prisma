// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId               String                    @id @default(uuid())
  email                String?
  emailVerified        Boolean                   @default(false) @db.Boolean
  phone                String?
  phoneData            Json?                     @default("{}") @db.Json
  phoneVerified        Boolean                   @default(false) @db.Boolean
  registeredVia        String?
  username             String                    @unique @default(uuid())
  gender               String?
  roles                String[]                  @default(["USER"])
  firstname            String?                   @db.VarChar(100)
  lastname             String?                   @db.VarChar(100)
  displayname          String?                   @db.VarChar(100)
  dob                  DateTime
  tos                  Boolean                   @db.Boolean
  blocked              String[]                  @default([])
  blockedBy            String[]                  @default([])
  followers            String[]                  @default([])
  following            String[]                  @default([])
  notifyOnPost         String[]                  @default([])
  notifyOnOffer        String[]                  @default([])
  notifyOnListing      String[]                  @default([])
  notifyOnPersonalAd   String[]                  @default([])
  notificationSettings UserNotificationSettings?
  UserNotifications    UserNotifications[]
  version              Int                       @default(0)
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  deletedAt            DateTime?
}

model UserNotificationSettings {
  userId                    String
  user                      User?   @relation(fields: [userId], references: [userId])
  notifyOnFollow            Boolean @default(true)
  notifyOnPostComment       Boolean @default(true)
  notifyOnPostLike          Boolean @default(true)
  notifyOnPersonalAdComment Boolean @default(true)
  notifyOnPersonalAdLike    Boolean @default(true)
  notifyOnListingLike       Boolean @default(true)
  notifyOnOfferComment      Boolean @default(true)
  notifyOnOfferLike         Boolean @default(true)

  @@id([userId])
}

model UserNotifications {
  userId         String
  user           User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  seen           Boolean      @default(false)
  read           Boolean      @default(false)

  @@id([notificationId, userId])
}

model Notification {
  id                String              @id @default(uuid())
  type              String
  message           String
  resourceType      String?
  resourceId        String?
  resourceData      Json?               @default("{}") @db.Json
  UserNotifications UserNotifications[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model RequestLog {
  id            String    @unique @default(uuid())
  ip            String?
  userAgent     String?
  userAgentData Json?     @default("{}") @db.Json
  method        String
  path          String
  originalUrl   String
  params        Json      @default("{}") @db.Json
  body          Json      @default("{}") @db.Json
  query         Json      @default("{}") @db.Json
  response      Json      @default("{}") @db.Json
  user          Json?     @default("{}") @db.Json
  userId        String?
  success       Boolean   @default(false)
  responseData  Json?     @default("{}") @db.Json
  time          Int?      @default(0)
  status        Int?
  message       String?
  error         ErrorLog?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ErrorLog {
  id        String      @unique @default(uuid())
  request   RequestLog? @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String?     @unique
  error     String?     @db.VarChar(1000)
  errors    Json?       @default("{}") @db.Json
  status    Int
  fix       String?     @db.VarChar(1000)
  resolved  Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
