// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            String             @id @default(uuid())
  email             String?
  emailVerified     Boolean            @default(false) @db.Boolean
  phone             String?
  phoneData         Json?              @default("{}") @db.Json
  phoneVerified     Boolean            @default(false) @db.Boolean
  registeredVia     String?
  username          String             @unique @default(uuid())
  gender            String?
  roles             String[]           @default(["USER"])
  firstname         String?            @db.VarChar(100)
  lastname          String?            @db.VarChar(100)
  displayname       String?            @db.VarChar(100)
  dob               DateTime
  followers         String[]           @default([])
  following         String[]           @default([])
  blocked           String[]           @default([])
  blockedBy         String[]           @default([])
  posts             Post[]
  reportedPosts     ReportPost[]
  userLikedPosts    UserLikesPost[]    @relation("UserLikesPost")
  userLikedComments UserLikesComment[] @relation("UserLikesComment")
  comments          Comment[]          @relation("UserAuthorsComment")
  viewed            View[]             @relation("UserViewedPost")
  moderatedPosts    ModerationReview[]
  tos               Boolean            @db.Boolean
  version           Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  savedPosts        SavedPosts[]
}

model Post {
  id             String           @id @default(uuid())
  caption        String?
  published      Boolean          @default(false)
  allowComments  Boolean          @default(true)
  showLikesCount Boolean          @default(true)
  pinned         Boolean          @default(false)
  createdBy      String
  urls           String[]         @default([])
  repostId       String?
  repost         Post?            @relation("PostIsRepost", fields: [repostId], references: [id])
  postMedia      PostMedia[]      @relation("PostHasMedia")
  tags           Tag[]
  moderation     ModerationQueue?
  createdByData  User             @relation(fields: [createdBy], references: [userId], onDelete: Cascade)
  comments       Comment[]        @relation("PostHasComment")
  views          View[]           @relation("PostHasViews")
  likedBy        UserLikesPost[]  @relation("PostLikedByUser")
  version        Int              @default(0)
  created        DateTime         @default(now())
  updated        DateTime         @updatedAt
  deletedAt      DateTime?
  savedPosts     SavedPosts[]
  reposts        Post[]           @relation("PostIsRepost")
}

model ModerationQueue {
  postId         String             @unique
  post           Post               @relation(fields: [postId], references: [id], onDelete: Cascade)
  moderated      Boolean            @default(false)
  autoModerate   Boolean            @default(true)
  contentWarning Boolean            @default(false)
  status         String             @default("PENDING")
  created        DateTime           @default(now())
  updated        DateTime?          @updatedAt
  publishAt      DateTime?
  moderation     ModerationReview[]
  reports        ReportPost[]

  @@id([postId])
}

model ModerationReview {
  id                  String          @id @unique @default(uuid())
  contentId           String
  content             ModerationQueue @relation(fields: [contentId], references: [postId], onDelete: Cascade)
  reviewedBy          String?
  reviewedByData      User?           @relation(fields: [reviewedBy], references: [userId], onDelete: Cascade)
  actionTaken         String          @default("APPROVED")
  rejected            Boolean         @default(false)
  rejectionReasonData ReportReason?   @relation(fields: [rejectionReason], references: [reason], onDelete: Cascade)
  rejectionReason     String?
  createdAt           DateTime        @default(now())
  comments            String?
}

model SavedPosts {
  userId    String
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, postId])
}

model ReportPost {
  postId         String
  post           ModerationQueue @relation(fields: [postId], references: [postId], onDelete: Cascade)
  reportedBy     String
  reportedByData User            @relation(fields: [reportedBy], references: [userId], onDelete: Cascade)
  reason         String
  reasonData     ReportReason    @relation(fields: [reason], references: [reason], onDelete: Cascade)
  details        String
  createdAt      DateTime        @default(now())

  @@id([postId, reason, reportedBy])
}

model ReportReason {
  reason            String             @id @unique
  title             String
  descriptionHTML   String
  descriptionText   String
  reportedPosts     ReportPost[]
  moderationReviews ModerationReview[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model PostMedia {
  id       String   @id @default(uuid())
  type     String
  imageUrl String
  image    String
  order    Int      @default(0)
  data     Json     @default("{}")
  postData Post     @relation("PostHasMedia", fields: [post], references: [id], onDelete: Cascade)
  post     String
  created  DateTime @default(now())
  updated  DateTime @updatedAt
}

model Tag {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
}

model UserLikesPost {
  user    User     @relation("UserLikesPost", fields: [userId], references: [userId], onDelete: Cascade)
  userId  String
  post    Post     @relation("PostLikedByUser", fields: [postId], references: [id], onDelete: Cascade)
  postId  String
  likedAt DateTime @default(now())

  @@id([postId, userId])
}

model UserLikesComment {
  user      User     @relation("UserLikesComment", fields: [userId], references: [userId], onDelete: Cascade)
  userId    String
  comment   Comment  @relation("CommentLikedByUser", fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  likedAt   DateTime @default(now())

  @@id([commentId, userId])
}

model Comment {
  id              String        @id @default(uuid())
  content         String
  pinned          Boolean       @default(false)
  createdAt       DateTime      @default(now())
  author          User          @relation("UserAuthorsComment", fields: [authorId], references: [userId], onDelete: Cascade)
  authorId        String
  post            Post          @relation("PostHasComment", fields: [postId], references: [id], onDelete: Cascade)
  postId          String
  media           CommentMedia?
  parentComment   Comment?      @relation("CommentParentsComment", fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId String?
  childComments   Comment[]     @relation("CommentParentsComment")

  likedBy UserLikesComment[] @relation("CommentLikedByUser")
}

model CommentMedia {
  id          String   @id @default(uuid())
  type        String
  imageUrl    String
  image       String
  data        Json     @default("{}")
  commentData Comment  @relation(fields: [comment], references: [id], onDelete: Cascade)
  comment     String   @unique
  created     DateTime @default(now())
  updated     DateTime @updatedAt
}

model View {
  post      Post     @relation("PostHasViews", fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation("UserViewedPost", fields: [userId], references: [userId], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  length    Int      @default(0)

  @@id([postId, userId])
}

model RequestLog {
  id            String    @unique @default(uuid())
  ip            String?
  userAgent     String?
  userAgentData Json?     @default("{}") @db.Json
  method        String
  path          String
  originalUrl   String
  params        Json      @default("{}") @db.Json
  body          Json      @default("{}") @db.Json
  query         Json      @default("{}") @db.Json
  response      Json      @default("{}") @db.Json
  user          Json?     @default("{}") @db.Json
  userId        String?
  success       Boolean   @default(false)
  responseData  Json?     @default("{}") @db.Json
  time          Int?      @default(0)
  status        Int?
  message       String?
  error         ErrorLog?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ErrorLog {
  id        String      @unique @default(uuid())
  request   RequestLog? @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String?     @unique
  error     String?     @db.VarChar(1000)
  errors    Json?       @default("{}") @db.Json
  status    Int
  fix       String?     @db.VarChar(1000)
  resolved  Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
